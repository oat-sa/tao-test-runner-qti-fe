/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2022 (original work) Open Assessment Technologies SA ;
 */

import request from 'core/fetchRequest';

/**
 * @typedef {Object} AttachmentsUploadData
 * @property {String} uploadMethod - upload the file with `fetch(uploadUrl, {method: uploadMethod, body: file})`
 * @property {String}  uploadUrl - upload the file with `fetch(uploadUrl, {method: uploadMethod, body: file})`
 * @property {String}  downloadUrl - once you upload the file, it will be accessible by this url
 * @property {String}  id - identifier of this file that should be inluded in response, will be used by the server
 * @property {String} uploadServiceType - returns 'default' for this proxy; used to configure upload process if it depends on proxy/configuration
 */
/**
 * Get info needed to upload a file that will be included somewhere in item response.
 * This info is different for each file and needs to be generated by the server.
 * After you get this info, you need to do the actual upload in another request.
 * Used to add images in ExtendedText interaction.
 * @param {Object} config - proxy config
 * @param {String} itemIdentifier
 * @param {String} responseIdentifier
 * @returns {Promise<AttachmentsUploadData>}
 */
export function getAttachmentsUploadData(config, itemIdentifier, responseIdentifier) {
    if (!config.attachmentsUploadDataUrl) {
        throw new Error('Get attachments upload data: url is not configured');
    }
    if (!responseIdentifier || !itemIdentifier) {
        throw new Error('Get attachments upload data: missing parameters');
    }

    const form = new FormData();
    form.append('item_id', itemIdentifier);
    form.append('response_id', responseIdentifier);

    const requestOptions = {
        jwtTokenHandler: config.jwtTokenHandler,
        method: 'POST',
        body: form
    };
    if (typeof config.requestTimeout === 'number') {
        requestOptions.timeout = config.requestTimeout;
    }
    return request(config.attachmentsUploadDataUrl, requestOptions).then(response => {
        if (
            response &&
            response.data &&
            response.data.uploadMethod &&
            response.data.uploadUrl &&
            response.data.downloadUrl &&
            response.data.id
        ) {
            return {
                uploadMethod: response.data.uploadMethod,
                uploadUrl: response.data.uploadUrl,
                downloadUrl: response.data.downloadUrl,
                id: response.data.id,
                uploadServiceType: 'default'
            };
        }
        throw new Error('Get attachments upload data: unexpected response format');
    });
}
